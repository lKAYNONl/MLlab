# -*- coding: utf-8 -*-
"""lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1llZT-qER8xW1k2DY6TEjA-nmPcP7Iz_x
"""

import numpy as np                # математика
import pandas as pd               # работа с табличными данными

import matplotlib.pyplot as plt   # визуализация
import seaborn                    # визуализация

import os

from google.colab import data_table
data_table.enable_dataframe_formatter()

# set the environment variable for the API key
os.environ['KAGGLE_USERNAME'] = "kaynomi" # your Kaggle username
os.environ['KAGGLE_KEY'] = "c92a51b40c941f720d14a21ddbf7e690" # your Kaggle key

# загрузить фрейм данных из загруженного файла

# download the dataset
!kaggle datasets download -d wenruliu/adult-income-dataset

# unzip the dataset
!unzip adult-income-dataset.zip

""" 
# вариант с загрузкой файла через всплывабщее окно
from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv(list(uploaded.keys())[0])


# вариант загрузки по url
url = 'https://www.kaggle.com/wenruliu/adult-income-dataset?select=adult.csv'

# 2.Загрузите данные в DataFrame. Много ли данных? Сколько признаков? Какие из них не числовые? 
df = pd.read_csv(url)
"""

# посмотрим на
df = pd.read_csv("adult.csv")
print(df.info())

print(df.shape[1])
non_numeric_columns = df.select_dtypes(exclude='number').columns
print(non_numeric_columns)

df['age'].dropna().values

"""Изучите статистику по данным"""

seaborn.histplot( df['age'].dropna().values, bins=20 )

df.describe()

"""Сделайте несколько простых запросов к таблице данных. Например: показать всех белых людей с доходом больше 50 тыс."""

df[  (df['race']=='White') & (df['income']=='>50K') ]

df[  (df['relationship']=='Not-in-family') & (df['marital-status']=='Never-married') & (df['native-country']=='Canada')&  (df['income']=='>50K') ]

"""Удалите пропуски, дубликаты, выбросы.
Сколько данных осталось?
Пришлось ли удалять столбцы.
"""

df.duplicated()

df.duplicated().sum()

print(f"число дубликатов { df.duplicated().sum() }")

# дублирующиеся строки
df[ df.duplicated() ]

df.isna()

df.isna().sum(axis=0)

# пропуски можно визуализировать
# построим из таблицы тепловую карту, где светлым отметим пропуски (True значения, которые вернёт data0.isna())
plt.figure( figsize=(15,10) )   # для удобства сделаем график большим
seaborn.heatmap( df.isna() )